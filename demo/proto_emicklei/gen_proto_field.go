package proto_emicklei

import (
	"flag"
	"fmt"
	"github.com/emicklei/proto"
	"github.com/oldbai555/lbtool/extpkg/pie/pie"
	"github.com/oldbai555/lbtool/log"
	"github.com/oldbai555/lbtool/utils"
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
	"github.com/spf13/viper"
	"io"
	"os"
	"path"
	"path/filepath"
	"sort"
	"strings"
)

var (
	workspace string
	cfgFile   string
	env       string
	protoPath string
	baseDir   string
	all       bool
)

const (
	defaultCfgName      = "default"
	defaultEnvPrefix    = "lb"
	defaultEnvWorkplace = "default_workspace"
	defaultEnvBaseDir   = "default_baseDir"
	defaultEnvProtoPath = "default_proto_path"
)

var RootCmd = &cobra.Command{
	Use:   "use",
	Short: "",
	Long:  "",
	Run: func(cmd *cobra.Command, args []string) {
		_ = cmd.Help()
	},
}

func init() {
	pflag.StringVarP(&cfgFile, "config", "c", "", "Config file")
	pflag.StringVarP(&env, "env", "e", "dev", "Env(dev,test) default:dev")
	pflag.BoolVarP(&all, "all", "a", false, "All Data")
	RootCmd.AddCommand(GenFieldCmd)
}

func NewDefault() *cobra.Command {
	return New(os.Stdin, os.Stdout, os.Stderr)
}

func New(i io.Reader, o, e io.Writer) *cobra.Command {

	RootCmd.SetOut(o)
	RootCmd.SetErr(e)
	RootCmd.Flags().SortFlags = true
	RootCmd.Flags().AddGoFlagSet(flag.CommandLine)

	Must(viper.BindPFlags(RootCmd.PersistentFlags()))
	viper.AutomaticEnv()
	viper.SetEnvPrefix(defaultEnvPrefix)
	viper.SetEnvKeyReplacer(strings.NewReplacer(".", "_", "-", "_"))

	cobra.OnInitialize(loadConfig)
	return RootCmd
}

// 加载配制
func loadConfig() {
	if cfgFile != "" {
		viper.SetConfigFile(cfgFile)
	} else {
		viper.AddConfigPath("config/")
		wd, err := os.Getwd()
		Exit(err)
		if FileExist(path.Join(wd, "config/.env")) {
			viper.SetConfigType("env")
			viper.SetConfigName(".env")
		} else if FileExist(path.Join(wd, "config/.env.sh")) {
			viper.SetConfigType("env")
			viper.SetConfigName(".env.sh")
		} else if FileExist(path.Join(wd, "config/env.sh")) {
			viper.SetConfigType("env")
			viper.SetConfigName("env.sh")
		} else {
			viper.SetConfigName(defaultCfgName)
		}
	}
	Exit(viper.ReadInConfig())
}

// GetWorkplace 获取工作目录
func GetWorkplace() string {
	if workspace != "" {
		return workspace
	}
	workspace = viper.GetString(defaultEnvWorkplace)
	if workspace == "" {
		wd, err := os.Getwd()
		Must(err)
		workspace = wd
	}
	return workspace
}

// GetBaseDir 获取基础路径
func GetBaseDir() string {
	if baseDir != "" {
		return baseDir
	}
	baseDir = viper.GetString(defaultEnvBaseDir)
	if baseDir == "" {
		baseDir = filepath.Dir(GetWorkplace())
		baseDir = filepath.Dir(baseDir)
		baseDir = filepath.Dir(baseDir)
	}
	return baseDir
}

// GetProtoPath 拿到proto所在的路径
func GetProtoPath() string {
	if protoPath != "" {
		return protoPath
	}
	protoPath = viper.GetString(defaultEnvProtoPath)
	if protoPath == "" {
		protoPath = filepath.Join(GetBaseDir(), "proto")
	}
	return protoPath
}

// MustGetProtoDefinition 解析proto
func MustGetProtoDefinition(protoDir string, serviceName string) *proto.Proto {
	f, err := os.Open(path.Join(protoDir, serviceName+".proto"))
	Must(err)
	defer MustCloseFile(f)

	definition, err := proto.NewParser(f).Parse()
	Must(err)
	return definition
}

// GetProto 拿到proto
func GetProto(serviceName string) *proto.Proto {
	p := MustGetProtoDefinition(GetProtoPath(), serviceName)
	return p
}

var GenFieldCmd = &cobra.Command{
	Use:   "genfield",
	Short: "Generate field [serviceName,...]",
	Long:  ``,
	Run: func(cmd *cobra.Command, args []string) {
		if len(args) == 0 {
			log.Errorf("serviceName required")
			return
		}

		s := args[0]
		serviceNames := strings.Split(s, ",")

		for _, serviceName := range serviceNames {
			var writeFilename string
			if FileExist(path.Join(GetWorkplace(), "service", serviceName)) {
				writeFilename = path.Join(GetWorkplace(), "service", serviceName, serviceName+"_field_autogen.go")
			} else if FileExist(path.Join(GetWorkplace(), "pkg", serviceName)) {
				writeFilename = path.Join(GetWorkplace(), "pkg", serviceName, serviceName+"_field_autogen.go")
			} else {
				log.Warnf("%s and %s not found,skip",
					path.Join(GetWorkplace(), "service", serviceName),
					path.Join(GetWorkplace(), "pkg", serviceName),
				)
				continue
			}
			fields := pie.Strings{}
			proto.Walk(GetProto(serviceName),
				proto.WithMessage(func(message *proto.Message) {
					for _, ele := range message.Elements {
						switch ele.(type) {
						case *proto.NormalField:
							fields = fields.Append(ele.(*proto.NormalField).Name)
						case *proto.MapField:
							fields = fields.Append(ele.(*proto.MapField).Name)
						}
					}
				}),
			)
			fields = fields.Unique()
			sort.Strings(fields)

			var lines, camelLines, underscoreLines []string
			lines = append(lines, fmt.Sprintf("// Code generated by \"%s\"; DO NOT EDIT.\n ", defaultEnvPrefix))
			lines = append(lines, "package "+serviceName)
			lines = append(lines, "")
			lines = append(lines, "const (")

			uniq := pie.Strings{}
			for _, v := range fields {
				cv := utils.UnderScore2Camel(v)
				uv := utils.Camel2UnderScore(v)
				if !uniq.Contains(cv) {
					camelLines = append(camelLines, "\tField"+cv+" = \""+cv+"\"")
					underscoreLines = append(underscoreLines, "\tField"+cv+"_ = \""+uv+"\"")
					uniq = uniq.Append(cv)
				}
			}
			lines = append(lines, camelLines...)
			lines = append(lines, "")
			lines = append(lines, underscoreLines...)
			lines = append(lines, ")")

			MustWriteToFile(writeFilename, strings.Join(lines, "\n"))
			oldFile := path.Join(GetWorkplace(), "service", serviceName, serviceName+"_field.go")
			if FileExist(oldFile) {
				Must(os.Remove(oldFile))
			}
		}
	},
}
